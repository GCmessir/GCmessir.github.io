<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Documenting the journey ^_^</title>
    <link>https://GCmessir.github.io/categories/java/</link>
    <description>Recent content in Java on Documenting the journey ^_^</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 21 Nov 2024 21:35:04 +0800</lastBuildDate>
    <atom:link href="https://GCmessir.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Io Programming</title>
      <link>https://GCmessir.github.io/blog/io_programming/</link>
      <pubDate>Thu, 21 Nov 2024 21:35:04 +0800</pubDate>
      <guid>https://GCmessir.github.io/blog/io_programming/</guid>
      <description>&lt;h3 id=&#34;输入流和输出流&#34;&gt;输入流和输出流&lt;a href=&#34;#%e8%be%93%e5%85%a5%e6%b5%81%e5%92%8c%e8%be%93%e5%87%ba%e6%b5%81&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;输入流（InputStream）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;输入流用于从数据源读取数据。常见的数据源包括文件、网络连接、内存中的字节数组等。&lt;code&gt;InputStream&lt;/code&gt; 是所有字节输入流的基类，它定义了一些基本的方法，具体的子类实现了这些方法以适应不同的数据源。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;输出流（OutputStream）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;输出流用于将数据写入目标位置。常见的目标位置包括文件、网络连接、内存中的字节数组等。&lt;code&gt;OutputStream&lt;/code&gt; 是所有字节输出流的基类，它定义了一些基本的方法，具体的子类实现了这些方法以适应不同的目标位置。&lt;/p&gt;&#xA;&lt;h3 id=&#34;file文件操作&#34;&gt;File文件操作&lt;a href=&#34;#file%e6%96%87%e4%bb%b6%e6%93%8d%e4%bd%9c&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;初识&#34;&gt;初识&lt;a href=&#34;#%e5%88%9d%e8%af%86&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;java.io.File类是一个与文件本身操作有关的类，此类可以实现文件创建、删除、重命名、取得文件大小、修改日期等常见系统文件操作&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;如果要使用File类则必须提供完整的文件操作路径，对于文件路径的设置可以通过File类的构造方法完成，当获取了正确的文件路径后就可以进行文件创建于删除操作、File类文件基本操作方法&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;No.&lt;/th&gt;&#xA;          &lt;th&gt;方法&lt;/th&gt;&#xA;          &lt;th&gt;类型&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;public File(String pathname)&lt;/td&gt;&#xA;          &lt;td&gt;构造&lt;/td&gt;&#xA;          &lt;td&gt;给定一个要操作文件的完整路径&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;public File(File parent,String child)&lt;/td&gt;&#xA;          &lt;td&gt;构造&lt;/td&gt;&#xA;          &lt;td&gt;给定要操作文件的父路径和子文件名称&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;public boolean createNewFile() throws IOException&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;创建文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;public boolean delete()&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;删除文件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;public boolean exists()&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;判断给定路径是否存在&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.io.File;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;JavaIODemo&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; Exception{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;File file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\\1.txt&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//文件路径: &amp;#34;\\&amp;#34;转义为&amp;#34;\&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(file.&lt;span style=&#34;color:#a6e22e&#34;&gt;exists&lt;/span&gt;()){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;file.&lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(file.&lt;span style=&#34;color:#a6e22e&#34;&gt;createNewFile&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;分隔符&#34;&gt;分隔符&lt;a href=&#34;#%e5%88%86%e9%9a%94%e7%ac%a6&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;windows中是&amp;quot;\&amp;quot; 而在UNIX或类UNIX操作系统中路径分隔符是&amp;quot;/&amp;quot;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java常用类库</title>
      <link>https://GCmessir.github.io/blog/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/</link>
      <pubDate>Wed, 20 Nov 2024 21:39:44 +0800</pubDate>
      <guid>https://GCmessir.github.io/blog/java%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93/</guid>
      <description>&lt;h2 id=&#34;stringbuffer类&#34;&gt;StringBuffer类&lt;a href=&#34;#stringbuffer%e7%b1%bb&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h4 id=&#34;string和stringbuffer的区别&#34;&gt;String和StringBuffer的区别&lt;a href=&#34;#string%e5%92%8cstringbuffer%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;String&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;不可变性&lt;/strong&gt;：&lt;code&gt;String&lt;/code&gt; 类是不可变的，这意味着一旦创建了一个 &lt;code&gt;String&lt;/code&gt; 对象，其值就不能改变。每次对 &lt;code&gt;String&lt;/code&gt; 进行修改（如连接、替换等操作）都会产生新的 &lt;code&gt;String&lt;/code&gt; 对象，原来的对象不会被改变。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程安全性&lt;/strong&gt;：由于 &lt;code&gt;String&lt;/code&gt; 的不可变性，它是线程安全的，可以被多个线程共享而无需担心数据一致性的问题。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：因为每次修改都会创建新的对象，所以在频繁进行字符串操作时，&lt;code&gt;String&lt;/code&gt; 的效率较低。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;StringBuffer&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;可变性&lt;/strong&gt;：&lt;code&gt;StringBuffer&lt;/code&gt; 是一个可变的字符序列，可以被多次修改而不创建新的对象。这意味着如果需要对字符串进行大量的修改操作，使用 &lt;code&gt;StringBuffer&lt;/code&gt; 比使用 &lt;code&gt;String&lt;/code&gt; 更加高效。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;线程安全性&lt;/strong&gt;：&lt;code&gt;StringBuffer&lt;/code&gt; 是线程安全的。它的方法都是同步的（即加了 &lt;code&gt;synchronized&lt;/code&gt; 关键字），这使得 &lt;code&gt;StringBuffer&lt;/code&gt; 可以在多线程环境中安全地使用，但是也导致了它的性能相比非线程安全的 &lt;code&gt;StringBuilder&lt;/code&gt; 要差一些。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;性能&lt;/strong&gt;：当需要在一个单线程环境下进行大量字符串操作时，&lt;code&gt;StringBuffer&lt;/code&gt; 仍然不是最优选择，因为它的线程安全特性会带来额外的开销。在这种情况下，应该考虑使用 &lt;code&gt;StringBuilder&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;String&lt;/code&gt;&lt;/strong&gt;：当你不需要修改字符串内容时，或者修改次数非常少的时候，使用 &lt;code&gt;String&lt;/code&gt; 是合适的。此外，&lt;code&gt;String&lt;/code&gt; 的不可变性和线程安全性使其成为多线程环境中的首选。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;StringBuffer&lt;/code&gt;&lt;/strong&gt;：如果你的应用程序需要在多线程环境中频繁地修改字符串，那么 &lt;code&gt;StringBuffer&lt;/code&gt; 是一个很好的选择，因为它提供了线程安全的操作。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;StringBuilder&lt;/code&gt;&lt;/strong&gt;：对于单线程环境下的频繁字符串操作，推荐使用 &lt;code&gt;StringBuilder&lt;/code&gt;，因为它比 &lt;code&gt;StringBuffer&lt;/code&gt; 性能更高，同时又保持了可变性的优点。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;stringbuffer介绍&#34;&gt;StringBuffer介绍&lt;a href=&#34;#stringbuffer%e4%bb%8b%e7%bb%8d&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;String类自身有一个最大的缺陷：内容一旦声明则不可改变，JDK为了方便用户修改字符串内容提供了StringBuffer类&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;StringBuffer类不像String类那样可以直接通过声明字符串常量方式进行实例化，而是必须像普通类对象使用一样，首先通过构造方法进行对象实例化，而后才可以调用方法进行处理。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;No.&lt;/th&gt;&#xA;          &lt;th&gt;方法&lt;/th&gt;&#xA;          &lt;th&gt;类型&lt;/th&gt;&#xA;          &lt;th&gt;描述&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;1&lt;/td&gt;&#xA;          &lt;td&gt;public StringBuffer()&lt;/td&gt;&#xA;          &lt;td&gt;构造&lt;/td&gt;&#xA;          &lt;td&gt;创建一个空的StringBuffer对象&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;2&lt;/td&gt;&#xA;          &lt;td&gt;public StringBuffer(String str)&lt;/td&gt;&#xA;          &lt;td&gt;构造&lt;/td&gt;&#xA;          &lt;td&gt;将接受到的String内容变为StringBuffer内容&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;3&lt;/td&gt;&#xA;          &lt;td&gt;public StringBuffer append(数据类型 变量)&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;内容连接，等价于String中：”+”操作&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;4&lt;/td&gt;&#xA;          &lt;td&gt;public StringBuffer insert(int offset,数据类型 变量)&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;在指定索引位置处插入数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;5&lt;/td&gt;&#xA;          &lt;td&gt;public StringBuffer delete(int start,int end)&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;删除指定索引范围之内的数据&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;6&lt;/td&gt;&#xA;          &lt;td&gt;public StringBuffer reverse()&lt;/td&gt;&#xA;          &lt;td&gt;普通&lt;/td&gt;&#xA;          &lt;td&gt;内容反转&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;示例&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Base</title>
      <link>https://GCmessir.github.io/blog/java_base/</link>
      <pubDate>Sun, 17 Nov 2024 15:19:37 +0800</pubDate>
      <guid>https://GCmessir.github.io/blog/java_base/</guid>
      <description>&lt;h2 id=&#34;java文件结构快速了解&#34;&gt;java文件结构快速了解&lt;a href=&#34;#java%e6%96%87%e4%bb%b6%e7%bb%93%e6%9e%84%e5%bf%ab%e9%80%9f%e4%ba%86%e8%a7%a3&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;java-文件的基本结构&#34;&gt;Java 文件的基本结构&lt;a href=&#34;#java-%e6%96%87%e4%bb%b6%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%bb%93%e6%9e%84&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;一个简单的Java文件通常包含以下几个部分：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;包声明&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;每个Java源文件都属于某个包。包的作用类似于文件夹，用于组织和分类相关的类。&lt;/li&gt;&#xA;&lt;li&gt;示例：&lt;code&gt;package com.example;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;导入语句&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;导入语句用于引入其他包中的类或接口，这样可以在当前文件中直接使用这些类或接口。&lt;/li&gt;&#xA;&lt;li&gt;示例：&lt;code&gt;import java.util.ArrayList;&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;类声明&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;类是Java程序的基本构建块。每个类定义了一组属性（变量）和方法（函数）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 类体&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;构造方法&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;构造方法是一种特殊的方法，用于创建类的新实例时初始化对象。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloWorld&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 初始化代码&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;属性（成员变量）&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;属性是类中存储数据的变量。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String name;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;方法是执行特定任务的代码块。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sayHello&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    System.&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;主方法（main方法）&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;主方法是Java应用程序的入口点。当程序启动时，JVM会寻找并执行这个方法。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;示例：&lt;/p&gt;&#xA;&lt;p&gt;java深色版本&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HelloWorld hello &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HelloWorld();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hello.&lt;span style=&#34;color:#a6e22e&#34;&gt;sayHello&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;示例代码&#34;&gt;示例代码&lt;a href=&#34;#%e7%a4%ba%e4%be%8b%e4%bb%a3%e7%a0%81&#34; class=&#34;post-heading__anchor&#34; aria-hidden=&#34;true&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;以下是一个完整的Java文件示例，结合了上述各个部分：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
